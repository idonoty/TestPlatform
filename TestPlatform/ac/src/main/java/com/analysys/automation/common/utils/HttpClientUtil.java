package com.analysys.automation.common.utils;import org.apache.http.HttpEntity;import org.apache.http.HttpHost;import org.apache.http.NameValuePair;import org.apache.http.client.CookieStore;import org.apache.http.client.config.RequestConfig;import org.apache.http.client.entity.UrlEncodedFormEntity;import org.apache.http.client.methods.CloseableHttpResponse;import org.apache.http.client.methods.HttpGet;import org.apache.http.client.methods.HttpPost;import org.apache.http.client.methods.HttpRequestBase;import org.apache.http.cookie.Cookie;import org.apache.http.entity.StringEntity;import org.apache.http.impl.client.BasicCookieStore;import org.apache.http.impl.client.CloseableHttpClient;import org.apache.http.impl.client.HttpClients;import org.apache.http.message.BasicNameValuePair;import org.apache.http.util.EntityUtils;import java.io.IOException;import java.util.ArrayList;import java.util.List;public class HttpClientUtil {    private static final CookieStore cookie = new BasicCookieStore();    public static long allTime;    // 代理开关    public static boolean openProy = false;  //为true时，抓包工具才能抓到接口    static RequestConfig requestConfig;    static {        // 代理设置        HttpHost proxy = new HttpHost("127.0.0.1", 8080); //填写本地的IP和端口号，如果连别人的抓包工具就写别人的        // ConnectTimeout： 链接建立的超时时间；        // SocketTimeout：响应超时时间，超过此时间不再读取响应；        // ConnectionRequestTimeout： http clilent中从connetcion pool中获得一个connection的超时时间；        requestConfig = RequestConfig.custom().setProxy(proxy).setConnectTimeout(10000).setSocketTimeout(10000)                .setConnectionRequestTimeout(3000).build();    }    public static  String getUBACookie(String ip,String appkey) {        CloseableHttpClient httpClient = null;        HttpPost httpPost = null;        String result = null;        CookieStore cookieStore = new BasicCookieStore();        try {            httpClient = HttpClients.custom().setDefaultCookieStore(cookieStore).build();            httpPost = new HttpPost(ip+"/ark/v2/login?project="+appkey);            httpPost.setEntity(new StringEntity("{\"username\":\"admin\",\"password\":\"96e79218965eb72c92a549dd5a330112\"}", "utf-8"));            httpPost.setHeader("content-type", "application/json");            httpClient.execute(httpPost);            CloseableHttpResponse closeableHttpResponse = httpClient.execute(httpPost);            HttpEntity httpEntity = closeableHttpResponse.getEntity();//            String result2 = EntityUtils.toString(httpEntity, "utf-8");//            System.out.println("登录结果为："+result2);            for (Cookie cookie:cookieStore.getCookies()) {//                String name =cookie.getName();//                String value = cookie.getValue();//                System.out.println("登陆cookie name = " + name + ", cookie value = " + value);                result=cookie.getName()+"="+cookie.getValue()+";"+result;            }            return result;        } catch (Exception ex) {            ex.printStackTrace();        }        return result;    }    /*    该方法按照请求地址，接口，参数和头信息的方式传入(U+I+P+H)    params按照 key2=value2&key2=value2 的格式    headers按照 name1=value1;name2=value2 的格式    例如：Request("get","http://localhost:8080/login?","name=A&id=2","header=a;charset=utf-8")    */    public static String Request(String method, String url, String interFace, String params, String headers){        if (method.equalsIgnoreCase("get")){            if (params==null){                return Response(method,url+interFace,null,headers);            }            return Response(method,url+interFace+params,null,headers);        }else {            return Response(method,url+interFace,params,headers);        }    }    //U+P    public static String Request(String method , String url, String params){        if (method.equalsIgnoreCase("get")){            return Response(method,url+params,null,null);        }else {            return Response(method,url,params,null);        }    }    //U+H    public static String Request(String method,String url,Object headers){        return Response(method,url,null,headers.toString());    }    //U    public static String Request(String method,String url){        return Response(method,url,null,null);    }    private static String Response(String method,String url,String params,String headers){        HttpRequestBase httprequest;        HttpEntity httpEntity = null;        String result=null;        CloseableHttpClient httpClients = HttpClients.custom().setDefaultCookieStore(cookie).build();        try {            if (method.equalsIgnoreCase("get")){                httprequest=new HttpGet(url);            }else if (method.equalsIgnoreCase("post")){                httprequest=new HttpPost(url);                if (params!=null && params !=""){                    // 参数处理，核心是 UrlEncodedFormEntity 需要List<NameValuePair>                    List<NameValuePair> list = new ArrayList();                    String params_list[]=params.split("&");                    for(String param : params_list){                        String values[] = param.split("=");                        list.add(new BasicNameValuePair(values[0],values[1]));                    }                    if (list.size() > 0) {                        ((HttpPost) httprequest).setEntity(new UrlEncodedFormEntity(list,"utf-8"));                    }                }            }else if(method.equalsIgnoreCase("postjson")){                httprequest=new HttpPost(url);                if (params!=null){                    ((HttpPost) httprequest).setEntity(new StringEntity(params,"utf-8"));                }            }else {                return "请求失败，请求方式必须为\"get\"或\"post\"或\"postJson\"";            }            if(headers!=null && headers !=""){                String headerList[] = headers.split(";");                for (String header: headerList) {                    String values[] = header.split("=");                    httprequest.addHeader(values[0],values[1]);                }            }            if (openProy) {                httprequest.setConfig(requestConfig);                                      //代理为true就走抓包            }            long startTime = System.currentTimeMillis();   //获取开始时间            CloseableHttpResponse Response=httpClients.execute(httprequest);            if(Response.getStatusLine().getStatusCode()==200){                allTime = System.currentTimeMillis()-startTime; //计算请求时间，单位毫秒            }else {                System.out.println("接口请求失败，code="+Response.getStatusLine().getStatusCode());            }            httpEntity =Response.getEntity();            result= EntityUtils.toString(httpEntity,"utf-8");        } catch (IOException e) {            e.printStackTrace();        }finally{            try {                EntityUtils.consume(httpEntity);                httpClients.close();            } catch (IOException e) {                e.printStackTrace();            }        }        return result;    }}